trigger:
- master

variables:
  chartName: 'spi-geoserver'
  imageTag: $(Build.BuildNumber)
  imageName: spi-geoserver:$(imageTag)
  secretName: spi-geoserver-secret
  namespace: spi9-dev
  releaseName: spi9-dev-geoserver
  azureSubscriptionEndpoint: 'SW Pipeline Ecosystem'
  kubernetesServiceEndpoint: devpusek8s01sph
  azureContainerRegistry: devpusecr.azurecr.io

resources:
  repositories:
    - repository: templates
      type: git
      name: PlatformTeam/platform-service

stages:
- stage: Build
  jobs:
  - template: build-templates/build-platform-service-job.yaml@templates
    parameters:
      azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
      azureContainerRegistry: $(azureContainerRegistry)
      imageName: $(imageName)

- stage: Deploy
  jobs:
    - job: perisitentVolume
      pool:
        vmImage: 'ubuntu-16.04'
      steps:
      - task: Kubernetes@1
        displayName: 'kubectl apply perisitent volume claim'
        inputs:
          kubernetesServiceEndpoint: $(kubernetesServiceEndpoint)
          namespace: $(namespace)
          command: apply
          arguments: -f $(Build.SourcesDirectory)/volume-claim.yaml

    - template: build-templates/deploy-platform-service-job.yaml@templates
      parameters:
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureContainerRegistry: $(azureContainerRegistry)
        kubernetesServiceEndpoint: $(kubernetesServiceEndpoint)
        imageName: $(imageName)     
        imageTag: $(imageTag) 
        chartName: $(chartName)
        namespace: $(namespace)
        secretName: $(secretName)
        releaseName: $(releaseName)
    - job: 'AddRBAC'
      steps:
      - task: Kubernetes@1
        displayName: kubectl apply rbac
        inputs:
          kubernetesServiceEndpoint: $(kubernetesServiceEndpoint)
          namespace: $(namespace)
          command: apply
          arguments: -f $(Build.SourcesDirectory)/rbac/rbac-config.yaml
    - job: 'ApplyJWT'
      steps:
      - task: Kubernetes@1
        displayName: kubectl apply JWT policy
        inputs:
          kubernetesServiceEndpoint: $(kubernetesServiceEndpoint)
          namespace: $(namespace)
          command: apply
          arguments: -f $(Build.SourcesDirectory)/jwt-token-policy.yaml          